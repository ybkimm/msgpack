package msgpack

import (
	"bytes"
	"testing"
)

func TestEncoder_EncodeString(t *testing.T) {
	tests := []struct {
		name    string
		v       string
		want    []byte
		wantErr bool
	}{
		{
			"fixstr",
			"test",
			[]byte{0xA4, 0x74, 0x65, 0x73, 0x74},
			false,
		},
		{
			"a paragraph",
			"A 'Hello, World!' program generally is a computer program that outputs " +
				"or displays the message 'Hello, World!'. Such a program is very " +
				"simple in most programming languages, and is often used to illustrate " +
				"the basic syntax of a programming language. It is often the first " +
				"program written by people learning to code. (from Wikipedia)",
			[]byte{
				0xda, 0x01, 0x4b, 0x41, 0x20, 0x27, 0x48, 0x65,
				0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x57, 0x6f, 0x72,
				0x6c, 0x64, 0x21, 0x27, 0x20, 0x70, 0x72, 0x6f,
				0x67, 0x72, 0x61, 0x6d, 0x20, 0x67, 0x65, 0x6e,
				0x65, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x69,
				0x73, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6d, 0x70,
				0x75, 0x74, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f,
				0x67, 0x72, 0x61, 0x6d, 0x20, 0x74, 0x68, 0x61,
				0x74, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
				0x73, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73,
				0x70, 0x6c, 0x61, 0x79, 0x73, 0x20, 0x74, 0x68,
				0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
				0x65, 0x20, 0x27, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
				0x2c, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x21,
				0x27, 0x2e, 0x20, 0x53, 0x75, 0x63, 0x68, 0x20,
				0x61, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
				0x6d, 0x20, 0x69, 0x73, 0x20, 0x76, 0x65, 0x72,
				0x79, 0x20, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
				0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x73, 0x74,
				0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
				0x6d, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x61, 0x6e,
				0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x2c, 0x20,
				0x61, 0x6e, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6f,
				0x66, 0x74, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65,
				0x64, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6c, 0x6c,
				0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x20,
				0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x73, 0x69,
				0x63, 0x20, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78,
				0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x70, 0x72,
				0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e,
				0x67, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
				0x67, 0x65, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x69,
				0x73, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x20,
				0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73,
				0x74, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
				0x6d, 0x20, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65,
				0x6e, 0x20, 0x62, 0x79, 0x20, 0x70, 0x65, 0x6f,
				0x70, 0x6c, 0x65, 0x20, 0x6c, 0x65, 0x61, 0x72,
				0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20,
				0x63, 0x6f, 0x64, 0x65, 0x2e, 0x20, 0x28, 0x66,
				0x72, 0x6f, 0x6d, 0x20, 0x57, 0x69, 0x6b, 0x69,
				0x70, 0x65, 0x64, 0x69, 0x61, 0x29,
			},
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			buf := bytes.NewBuffer(make([]byte, 0, 512))
			e := NewEncoder(buf)
			if err := e.EncodeString(tt.v); (err != nil) != tt.wantErr {
				t.Errorf("EncodeString() error = %v, wantErr %v", err, tt.wantErr)
			}
			if !bytes.Equal(buf.Bytes(), tt.want) {
				t.Errorf("EncodeString() got = [% X], want [% X]", buf.Bytes(), tt.want)
			}
		})
	}
}
