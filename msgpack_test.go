package msgpack

type testSmallStruct struct {
	id int
	ip string
	ua string
}

var _ Map = (*testSmallStruct)(nil)

func (b *testSmallStruct) MarshalMsgpackMap(e *Encoder) {
	e.PutIntKey("id", b.id)
	e.PutStringKey("ip", b.ip)
	e.PutStringKey("ua", b.ua)
}

func (b *testSmallStruct) UnmarshalMsgpackMap(d *Decoder, key string) error {
	switch key {
	case "id":
		return d.DecodeInt(&b.id)

	case "ip":
		return d.DecodeString(&b.ip)

	case "ua":
		return d.DecodeString(&b.ua)
	}

	return nil
}

func (b *testSmallStruct) KeySize() uint32 {
	return 3
}

var SmallStruct = &testSmallStruct{
	id: 12345,
	ip: "192.168.0.100",
	ua: "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0",
}

var SmallStructDataJSON = []byte(`{"id":12345,"ip":"192.168.0.100","ua":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0"}`)

var SmallStructData = []byte{
	0x83, 0xa2, 0x69, 0x64, 0xcd, 0x30, 0x39, 0xa2,
	0x69, 0x70, 0xad, 0x31, 0x39, 0x32, 0x2e, 0x31,
	0x36, 0x38, 0x2e, 0x30, 0x2e, 0x31, 0x30, 0x30,
	0xa2, 0x75, 0x61, 0xd9, 0x4e, 0x4d, 0x6f, 0x7a,
	0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x35, 0x2e, 0x30,
	0x20, 0x28, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x73, 0x20, 0x4e, 0x54, 0x20, 0x31, 0x30, 0x2e,
	0x30, 0x3b, 0x20, 0x57, 0x69, 0x6e, 0x36, 0x34,
	0x3b, 0x20, 0x78, 0x36, 0x34, 0x3b, 0x20, 0x72,
	0x76, 0x3a, 0x37, 0x31, 0x2e, 0x30, 0x29, 0x20,
	0x47, 0x65, 0x63, 0x6b, 0x6f, 0x2f, 0x32, 0x30,
	0x31, 0x30, 0x30, 0x31, 0x30, 0x31, 0x20, 0x46,
	0x69, 0x72, 0x65, 0x66, 0x6f, 0x78, 0x2f, 0x37,
	0x31, 0x2e, 0x30,
}

var _ Array = (*benchSmallArray)(nil)

type benchSmallArray []string

func (s *benchSmallArray) MarshalMsgpackArray(e *Encoder, i int) {
	e.PutString((*s)[i])
}

func (s *benchSmallArray) UnmarshalMsgpackArray(d *Decoder, l int) (err error) {
	for i := 0; i < l; i++ {
		err = d.DecodeString(&(*s)[i])
		if err != nil {
			break
		}
	}
	return
}

func (s *benchSmallArray) Length() uint32 {
	return uint32(len(*s))
}

var SmallArray = &benchSmallArray{
	"Hello", "World",
	"Hello", "World",
	"Hello", "World",
	"Hello", "World",
	"Hello", "World",
	"Hello", "World",
	"Hello", "World",
	"Hello", "World",
}

var TestString = "A 'Hello, World!' program generally is a computer program that outputs " +
	"or displays the message 'Hello, World!'. Such a program is very " +
	"simple in most programming languages, and is often used to illustrate " +
	"the basic syntax of a programming language. It is often the first " +
	"program written by people learning to code. (from Wikipedia)"

var TestStringData = []byte{
	0xda, 0x01, 0x4b, 0x41, 0x20, 0x27, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x21, 0x27, 0x20, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x20, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x69,
	0x73, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x20, 0x27, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x2c, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x21,
	0x27, 0x2e, 0x20, 0x53, 0x75, 0x63, 0x68, 0x20,
	0x61, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x20, 0x69, 0x73, 0x20, 0x76, 0x65, 0x72,
	0x79, 0x20, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x73, 0x74,
	0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x2c, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6f,
	0x66, 0x74, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65,
	0x64, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6c, 0x6c,
	0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x20, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x69,
	0x73, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x20, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x20, 0x62, 0x79, 0x20, 0x70, 0x65, 0x6f,
	0x70, 0x6c, 0x65, 0x20, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x20, 0x28, 0x66,
	0x72, 0x6f, 0x6d, 0x20, 0x57, 0x69, 0x6b, 0x69,
	0x70, 0x65, 0x64, 0x69, 0x61, 0x29,
}
